import pandas as pd

# Assuming 'current' and 'prev' are already defined pandas DataFrames

# Sum 'total' in 'current' dataframe by 'customer ID' and 'Customer'
current_totals = current.groupby(['customer ID', 'Customer'])['total'].sum().reset_index(name='current_total')

# Sum 'total' in 'prev' dataframe by 'customer ID' and 'Customer'
prev_totals = prev.groupby(['customer ID', 'Customer'])['total'].sum().reset_index(name='prev_total')

# Merging the 'current_totals' and 'prev_totals' on 'customer ID' and 'Customer'
merged_totals = pd.merge(current_totals, prev_totals, on=['customer ID', 'Customer'], how='outer')

# The 'merged_totals' dataframe now contains the summed totals for each unique 'customer ID' and 'Customer' from both 'current' and 'prev'
print(merged_totals)




# Assuming 'current' is your DataFrame
# Assuming 'facility' is the column you want to filter

# Filter out rows where 'facility' starts with 5 or 6
current = current[~current['facility'].astype(str).str.startswith(('5', '6'))]

# If you want to reset the index after filtering
current.reset_index(drop=True, inplace=True)



# Sum of the 'total' column in the 'current' dataframe
current_total_sum = current['total'].sum()

# Sum of the 'total' column in the 'prev' dataframe
prev_total_sum = prev['total'].sum()

# Optionally, you can print these sums
print(f"Sum of 'total' in current: {current_total_sum}")
print(f"Sum of 'total' in prev: {prev_total_sum}")


# Format the sums as currency (assuming USD for example)
formatted_sum_current_total = "${:,.2f}".format(sum_current_total)
formatted_sum_prev_total = "${:,.2f}".format(sum_prev_total)








import pandas as pd

# Assuming 'current' and 'prev' are your dataframes

# Summing 'total' values grouped by 'customer ID' and 'Customer'
current['current_total'] = current.groupby(['customer ID', 'Customer'])['total'].transform('sum')
prev['prev_total'] = prev.groupby(['customer ID', 'Customer'])['total'].transform('sum')

# Creating new columns for 'New Money'
new_df = pd.DataFrame()
new_df['New Money'] = current['current_total'] - prev['prev_total']

# Summing 'total' values grouped by 'customer ID' and 'Category Type'
for cat_type in ['A', 'B', 'S']:
    # Current
    current[f'Cat {cat_type} Current'] = current[current['Category Type'] == cat_type].groupby('customer ID')['total'].transform('sum')
    # Prev
    prev[f'Cat {cat_type} Prev'] = prev[prev['Category Type'] == cat_type].groupby('customer ID')['total'].transform('sum')

    # Difference
    new_df[f'Cat {cat_type}'] = current[f'Cat {cat_type} Current'] - prev[f'Cat {cat_type} Prev']

# Summing 'total' values for 'committed (Y)' and 'committed (C)'
for commitment in ['Y', 'C']:
    # Current
    current[f'Cat A committed ({commitment}) current'] = current[(current['Category Type'] == 'A') & (current['Committed'] == commitment)].groupby('customer ID')['total'].transform('sum')
    # Prev
    prev[f'Cat A committed ({commitment}) prev'] = prev[(prev['Category Type'] == 'A') & (prev['Committed'] == commitment)].groupby('customer ID')['total'].transform('sum')

    # Difference
    new_df[f'Cat A committed ({commitment}) difference'] = current[f'Cat A committed ({commitment}) current'] - prev[f'Cat A committed ({commitment}) prev']

# Total Cat A committed
new_df['Total Cat A committed'] = new_df['Cat A committed (Y) difference'] + new_df['Cat A committed (C) difference']

# Concatenating all columns into one dataframe
result_df = pd.concat([current[['current_total']], prev[['prev_total']], new_df], axis=1)

# Displaying the resulting dataframe
print(result_df)



FINAL

import pandas as pd

# Sample data for illustration purposes (replace with your actual DataFrames)
# current = pd.DataFrame(...)
# prev = pd.DataFrame(...)

# Function to compute sum of 'total' for a given DataFrame, Category Type, and optional Committed Ind
def sum_by_category_and_commitment(df, category, commitment=None):
    if commitment:
        filtered_df = df[(df['Category Type'] == category) & (df['Committed Ind'] == commitment)]
    else:
        filtered_df = df[df['Category Type'] == category]
    return filtered_df.groupby('cif customer id')['total'].sum()

# Create the new DataFrame
new_df = pd.DataFrame()
new_df['cif customer id'] = current['cif customer id'].unique()

categories = ['A', 'B', 'S']
commitments = [('Y', 'Cat A committed (Y)'), ('C', 'Cat A committed (C)')]

for category in categories:
    # Current and Prev sums
    current_sum = sum_by_category_and_commitment(current, category)
    prev_sum = sum_by_category_and_commitment(prev, category)
    
    # Merge into new DataFrame
    new_df = new_df.merge(current_sum, on='cif customer id', how='left').rename(columns={'total': f'Cat {category} Current'})
    new_df = new_df.merge(prev_sum, on='cif customer id', how='left').rename(columns={'total': f'Cat {category} Prev'})
    
    # Calculate difference
    new_df[f'Cat {category}'] = new_df[f'Cat {category} Current'] - new_df[f'Cat {category} Prev']

for commitment, col_prefix in commitments:
    # Current and Prev sums for committed indicators
    current_commit_sum = sum_by_category_and_commitment(current, 'A', commitment)
    prev_commit_sum = sum_by_category_and_commitment(prev, 'A', commitment)
    
    # Merge and calculate difference
    new_df = new_df.merge(current_commit_sum, on='cif customer id', how='left').rename(columns={'total': f'{col_prefix} current'})
    new_df = new_df.merge(prev_commit_sum, on='cif customer id', how='left').rename(columns={'total': f'{col_prefix} prev'})
    new_df[f'{col_prefix} difference'] = new_df[f'{col_prefix} current'] - new_df[f'{col_prefix} prev']

# Calculate Total Cat A committed
new_df['Total Cat A committed'] = new_df['Cat A committed (Y) difference'] + new_df['Cat A committed (C) difference']

# Replace NaN values with 0 if necessary
new_df.fillna(0, inplace=True)

# Display the final DataFrame (for verification)
print(new_df)










# Assuming 'new_df' and 'merged_totals' are already defined

# Ensure the CIF Customer Id column is named consistently in both DataFrames
# If necessary, rename the column in either DataFrame to match the other
# new_df.rename(columns={'cif customer id': 'CIF Customer Id'}, inplace=True)
# merged_totals.rename(columns={'cif customer id': 'CIF Customer Id'}, inplace=True)

# Perform the merge
combined_df = pd.merge(new_df, merged_totals, on='CIF Customer Id', how='left')

# Reorder columns to ensure CIF Customer Id is the first column followed by the rest of new_df's columns and then merged_totals' columns
# First, list all columns of new_df (excluding 'CIF Customer Id' since it's already the first column)
new_df_columns = [col for col in new_df.columns if col != 'CIF Customer Id']
# Next, get columns from merged_totals excluding 'CIF Customer Id' to avoid duplication
merged_totals_columns = [col for col in merged_totals.columns if col not in new_df.columns and col != 'CIF Customer Id']

# Define the new column order
new_column_order = ['CIF Customer Id'] + new_df_columns + merged_totals_columns

# Reorder the columns in combined_df
combined_df = combined_df[new_column_order]

# Display the combined DataFrame (for verification)
print(combined_df)
