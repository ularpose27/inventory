import pandas as pd

# Assuming 'current' and 'prev' are already defined pandas DataFrames

# Sum 'total' in 'current' dataframe by 'customer ID' and 'Customer'
current_totals = current.groupby(['customer ID', 'Customer'])['total'].sum().reset_index(name='current_total')

# Sum 'total' in 'prev' dataframe by 'customer ID' and 'Customer'
prev_totals = prev.groupby(['customer ID', 'Customer'])['total'].sum().reset_index(name='prev_total')

# Merging the 'current_totals' and 'prev_totals' on 'customer ID' and 'Customer'
merged_totals = pd.merge(current_totals, prev_totals, on=['customer ID', 'Customer'], how='outer')

# The 'merged_totals' dataframe now contains the summed totals for each unique 'customer ID' and 'Customer' from both 'current' and 'prev'
print(merged_totals)




# Assuming 'current' is your DataFrame
# Assuming 'facility' is the column you want to filter

# Filter out rows where 'facility' starts with 5 or 6
current = current[~current['facility'].astype(str).str.startswith(('5', '6'))]

# If you want to reset the index after filtering
current.reset_index(drop=True, inplace=True)



# Sum of the 'total' column in the 'current' dataframe
current_total_sum = current['total'].sum()

# Sum of the 'total' column in the 'prev' dataframe
prev_total_sum = prev['total'].sum()

# Optionally, you can print these sums
print(f"Sum of 'total' in current: {current_total_sum}")
print(f"Sum of 'total' in prev: {prev_total_sum}")


# Format the sums as currency (assuming USD for example)
formatted_sum_current_total = "${:,.2f}".format(sum_current_total)
formatted_sum_prev_total = "${:,.2f}".format(sum_prev_total)








import pandas as pd

# Assuming 'current' and 'prev' are your dataframes

# Summing 'total' values grouped by 'customer ID' and 'Customer'
current['current_total'] = current.groupby(['customer ID', 'Customer'])['total'].transform('sum')
prev['prev_total'] = prev.groupby(['customer ID', 'Customer'])['total'].transform('sum')

# Creating new columns for 'New Money'
new_df = pd.DataFrame()
new_df['New Money'] = current['current_total'] - prev['prev_total']

# Summing 'total' values grouped by 'customer ID' and 'Category Type'
for cat_type in ['A', 'B', 'S']:
    # Current
    current[f'Cat {cat_type} Current'] = current[current['Category Type'] == cat_type].groupby('customer ID')['total'].transform('sum')
    # Prev
    prev[f'Cat {cat_type} Prev'] = prev[prev['Category Type'] == cat_type].groupby('customer ID')['total'].transform('sum')

    # Difference
    new_df[f'Cat {cat_type}'] = current[f'Cat {cat_type} Current'] - prev[f'Cat {cat_type} Prev']

# Summing 'total' values for 'committed (Y)' and 'committed (C)'
for commitment in ['Y', 'C']:
    # Current
    current[f'Cat A committed ({commitment}) current'] = current[(current['Category Type'] == 'A') & (current['Committed'] == commitment)].groupby('customer ID')['total'].transform('sum')
    # Prev
    prev[f'Cat A committed ({commitment}) prev'] = prev[(prev['Category Type'] == 'A') & (prev['Committed'] == commitment)].groupby('customer ID')['total'].transform('sum')

    # Difference
    new_df[f'Cat A committed ({commitment}) difference'] = current[f'Cat A committed ({commitment}) current'] - prev[f'Cat A committed ({commitment}) prev']

# Total Cat A committed
new_df['Total Cat A committed'] = new_df['Cat A committed (Y) difference'] + new_df['Cat A committed (C) difference']

# Concatenating all columns into one dataframe
result_df = pd.concat([current[['current_total']], prev[['prev_total']], new_df], axis=1)

# Displaying the resulting dataframe
print(result_df)
